1.1引言
一、现代计算机的特征是处理器的并行性和内存的层次性
1、关于如何做到并行有几种方式，在量化分析书籍里有专门讲到，待补充；
2、内存的层次性简单理解即存储器是如何设计，如何做到有利于编程和程序执行。

二、如何理解程序性能
1、简单讲程序的执行效率从软硬件层面讲受哪些因素影响
程序性能 = 算法有效性 + 程序转译成机器指令的软件系统 + 指令执行效率
a、算法，决定了源代码数量和I/O操作数量（以ssp-3芯片为例，即寄存器操作，由于寄存器时钟一般比主频低，I/O操作数量直接影响该操作的执行时间，另外I/O
也可能去访问除core以外的“模块”，响应速度慢）。
b、软件系统即编程语言、编译器及体系结构，直接影响源码级语句对应的计算机指令数量（以ssp-3芯片为例，此处仅关注微码数量，直接影响到场景限速）
c、处理器和存储系统，影响指令执行时间（以ssp-3芯片为例，目前由于pktmem读延迟增长了流水线级数，另外指令存储读取延迟也直接影响了处理器设计和指令
取指效率）
d、I/O系统（硬件和操作系统），决定I/O执行速度（以ssp-3芯片为例，如一次查表，查表延迟直接影响了包在核中停留的时间）。

1.2计算机体系结构中8大思想
a.面向摩尔定律的设计，设计者在设计处理器时应从芯片完成后做出性能和功耗预期，以未来来衡量当前而非以当前市面的主流处理器性能参数等做对比
b.抽象简化设计，抽象可以隐藏底层的细节，从而关注处理器的主要矛盾，不然时间成本会被过分消耗在底层交互的细节上，“IP”化我理解是便于抽象简化的方式
c.加速大概率事件，我理解对于处理器运行负载，其中的80%部分是大概率常用载荷值得优化，“CISC”==>“RISC”指令的转变我觉得也是基于此种思想，抽象常用的
简单指令，减少一些超长指令从而达到指令系统的简单性和用户友好性。
d.并行提高性能，这是一个值得深究的思想，以ssp3为例，增加并行查表以减少线程切换的开销达到充分利用硬件，又如协处理中的增加除法单元以达到除法次数
更优的效果，这是一个资源和性能权衡的课题
e.利用流水线提高性能，如何合理的设计流水线是个学问，需要考虑流水线的本质，将指令执行过程抽象化分级到不同的“流水线级”，利用流水线的重叠性达到性能
提升的效果
f.预测，有效的预测（80%的成功率）以及预测失败后较小的回归正确的代价，这也是一个设计上的权衡
g.存储器层次性，这直接影响指令执行，容量甚至是编程的友好效果
h.通过冗余提高可靠性，书上举的例子是卡车的双轮胎，ssp3原来有过33个cluster的设计，以防某个cluster出错，不会导致基本性能的问题，这也包含一个代价
的权衡哲学在里面，增加一个备用的cluster，只有在某给出错的情况下才有优化，不然只是凭空增加了资源、设计复杂性、连线复杂性，这需要使用概率的数学
思想去计算，比如出错单给cluster的概率是多少，增加备用的代价是多少，有备用cluster能节约多少这种废片的成本，基于这些才能做出决策。当然一些高稳定
性处理器另当别论，如一下航空军事类的处理器设计，成本可以忽略，主要还是看性能和可靠性。

1.3程序与硬件的分层
a.应用软件/程序
b.系统软件/程序
c.硬件

1.4处理器硬件抽象
a.输入设备
b.输出设备
c.运算器
d.控制器
e.存储器，冯诺依曼结构只分到这5种，哈佛架构会对此再细分为指令存储器和数据存储器

1.6性能
1.响应时间
2.吞吐量
3.指令性能，cpi,时钟频率以及指令数3个方面综合评估
4.另外一个衡量参数每一百万条指令执行时间，MIPS

1.7功耗
对晶体管的0==>1==>0==>1翻转的动态功耗，翻转一次的能耗=1/2 * 电容 * 电压平方
a.电容取决于晶体管的数量（扇出）
b.电压很容易理解即VSS
现代晶体管数量暴增而功耗反而上升不明显的原因是因为电压下降很快，但是到了1v以下会严重影响晶体管静态的泄露功耗，因为晶体管不是简单的二阶响应器件
另外随着晶体管的尺寸变小，原来不起主要影响的一些量子响应变得显著，所以目前降低电压的方式几乎到瓶颈，除非修改晶体管的材料如从si==>c。

1.8性能评估的benchmark
处理器开发商会共同出一套针对于某个方面性能的程序测试集用于跑分，涉及执行时间、功耗等，之前华为麒麟芯片就专门跑过安卓的跑分程序。
